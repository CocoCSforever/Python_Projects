pyde:
    1. setup
        background
        size
        draw board lines
        initialize board and gc 
    2. draw
        gc.update()
    3. mouseClicked
        gc.draw()
--------------Class-----------------
(1) GameController:
    1. init
        Board board
        boolean game_over
        wordsFont: Font for end mesage
        also set board.gc = self
    2. update():
        board.update()
        if game is over, print or display end text
    3. end_game():
        called by board
        when there are no more legal moves
        set game_over to True
    4. display_end_text():
        print or display the end message
        winner and its tiles
(2) board
    1. init
        int board_size
        int cell_size
        nested list cells = board_field_cell
        int: default number of white(2), black tiles(2) and unused disk(total-4)
        initialize every cell
        boolean current_player:
            denote the current color for drawing tiles
            True for white, False for black
        call setup()
    2. setup():
        draw first four disks
        call board_cell.draw()
    3. update():
        check whether there are no more legal moves,
        if so, gc.end_game(): set game_over to True
        **don't need to display every cell(will change it in part 2, no need to look through)
    4. draw():
        when can we draw a new one with current color:
            1)current position doesn't have a tile: self.cells[x][y].tile
            2)current position is legal: 
                for gc.draw(x, y)->board.draw(x, y)->self.cells[x][y]=false
                ->check_legal()
        everytime we draw:
            change the corresponding number of tiles
            reverse the current_player to change the color for next time
            find and flip the opposite tile: flip_tiles()
    5. check_legal(x, y)
        For eight directions, traverse until:
            1)index out of range==> False
            2)there is a tile with the same color as the current one
                yes ==> True
                not ==> False
    6. flip_tiles
        if current position is legal
        traverse eight directions until index out of range
            if there is a tile with the same color as the current one
                flip the opposite tiles between the two tiles
    7. check_completion_status
        1)board is full
        2)board is not full but the remaining position is not legal
            check_legal() for every empty position
        if either one, end()
    8. end()
        **move the part of end_game to this method
    9. **delete look_through_board
(3) board_cell
    1. init:
        3-tuple for color: white black
        constant PIXEL = 90
        int cell_size
        boolean tile: whether there is a tile
        int x, y
    2. **delete display:
        draw tile
    3. draw
        set the current tile to True: indicate the cell has a tile
        set the tile's color with current_player from board
        **draw tile here

When the user tries to make an illegal move
    print/display message or not
    cannot make it, don't draw and don't change turns
When the user makes a legal move
    flip all opposite tiles between the current one and the first one with same color
    for eight directions
When it’s the computer’s turn
    if we successfully draw a tile, which means, board_cell.draw is called
    then we change turns
** is where I would make changes to the current codes